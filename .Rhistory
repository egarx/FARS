library(magrittr)
years<-2013
dat_list <- fars_read_years(years)
library(dplyr)
library(readr)
filename <- "./Internal_Data/accident_2013.csv.bz2"
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::data_frame(data)
}
aux<- fars_read(filename)
make_filename <- function(year) {
year <- as.integer(year)
sprintf("./Internal_Data/accident_%d.csv.bz2", year)
}
aux <-make_filename(2015)
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(c(2015))
library(tidyr)
library(magrittr)
years<-2013
dat_list <- fars_read_years(years)
View(dat_list)
View(dat_list[1])
View(dat_list[1][1])
View(dat_list[[1]])
bind_rows(dat_list)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
library(maps)
library(graphics)
library(dplyr)
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_map_state(49, 2015)
library(devtools)
use_vignette("Model_Details")
library(devtools)
use_travis()
use_appveyor()
system.file()
path.expand("~")
path.expand(file.path("~", "Desktop"))
path.expand("~")
normalizePath(file.path("~", "R"))
normalizePath(".")
normalizePath("..")
data_file <- normalizePath(file.path("~", "data.txt"))
data_file <- normalizePath(file.path("~"))
data_file
data_file <- normalizePath(file.path("~", "data.txt"))
data_file
dirname(data_file)
dirname(dirname(data_file))
basename(data_file)
path.expand("~")
path.expand(file.path("~", "Desktop"))
normalizePath(file.path("~", "R"))
normalizePath(".")
normalizePath("..")
file.path("~",Desktop)
file.path("~","Desktop")
file.path("~","Documents","data.txt")
Sys.info()
Sys.info()['sysname']
Sys.info()['nodename']
Sys.info()['sysname']
path.expand("~")
path.expand(".")
path.expand("~")
path.expand(file.path("~", "Desktop"))
normalizePath(file.path("~", "R"))
normalizePath(".")
normalizePath("..")
path.expand("~")
file.path("~","Documents","data.txt")
path.expand("~")
path.expand(file.path("~", "Desktop"))
path.expand(file.path("~", "data.txt"))
normalizePath(file.path("~", "R"))
path.expand("~")
normalizePath(file.path("~", "R"))
normalizePath(".")
normalizePath("..")
normalizePath("..")
data_file <- normalizePath(file.path("~", "data.txt"))
data_file
dirname(data_file)
dirname(dirname(data_file))
# rappdirs
library(rappdirs)
install.packages("rappdirs")
library(rappdirs)
site_data_dir(appname = "ggplyr2")
user_data_dir(appname = "ggplyr2")
# Enviromentals attributes
.Platform$OS.type
.Machine$double.xmin
.Machine$double.xmax + 100 == .Machine$double.xmax
.Machine$double.xmax
.Machine$double.eps != 1
.Machine$double.xmin != 1
